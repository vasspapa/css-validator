/* Generated By:JavaCC: Do not edit this line. CssParserTokenManager.java */
package org.w3c.css.parser.analyzer;

import java.io.InputStream;
import java.util.Vector;
import java.util.Enumeration;
import java.net.URL;
import org.w3c.css.values.CssValue;
import org.w3c.css.values.CssExpression;
import org.w3c.css.values.CssString;
import org.w3c.css.values.CssURL;
import org.w3c.css.values.CssLength;
import org.w3c.css.values.CssNumber;
import org.w3c.css.values.CssColor;
import org.w3c.css.values.CssIdent;
import org.w3c.css.values.CssPercentage;
import org.w3c.css.values.CssFrequency;
import org.w3c.css.values.CssTime;
import org.w3c.css.values.CssDate;
import org.w3c.css.values.CssAngle;
import org.w3c.css.values.CssFunction;
import org.w3c.css.values.CssUnicodeRange;
import org.w3c.css.values.CssResolution;
import org.w3c.css.properties.css1.CssProperty;
import org.w3c.css.parser.Frame;
import org.w3c.css.util.ApplContext;
import org.w3c.css.parser.CssError;
import org.w3c.css.parser.CssSelectors;
import org.w3c.css.parser.CssParseException;
import org.w3c.css.parser.AtRule;
import org.w3c.css.parser.AtRuleMedia;
import org.w3c.css.parser.AtRuleFontFace;
import org.w3c.css.parser.AtRulePage;
import org.w3c.css.parser.AtRulePreference;
import org.w3c.css.parser.AtRulePhoneticAlphabet;
import org.w3c.css.properties.svg.AtRuleColorProfile;
import org.w3c.css.util.InvalidParamException;
import org.w3c.css.util.Util;
import org.w3c.css.util.Messages;
import org.w3c.css.css.StyleSheetCom;
import org.w3c.css.selectors.AdjacentSelector;
import org.w3c.css.selectors.AttributeSelector;
import org.w3c.css.selectors.ChildSelector;
import org.w3c.css.selectors.ClassSelector;
import org.w3c.css.selectors.DescendantSelector;
import org.w3c.css.selectors.IdSelector;
import org.w3c.css.selectors.TypeSelector;
import org.w3c.css.selectors.UniversalSelector;
import org.w3c.css.selectors.attributes.AttributeAny;
import org.w3c.css.selectors.attributes.AttributeBegin;
import org.w3c.css.selectors.attributes.AttributeExact;
import org.w3c.css.selectors.attributes.AttributeOneOf;
import org.w3c.css.selectors.attributes.AttributeStart;
import org.w3c.css.selectors.attributes.AttributeSubstr;
import org.w3c.css.selectors.attributes.AttributeSuffix;

public class CssParserTokenManager implements CssParserConstants {
	public java.io.PrintStream debugStream = System.out;

	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
		switch (pos) {
		case 0:
			if ((active0 & 0x20040L) != 0L)
				return 89;
			if ((active0 & 0xfe00000000000000L) != 0L || (active1 & 0x3fL) != 0L)
				return 55;
			if ((active0 & 0x2000000L) != 0L)
				return 218;
			return -1;
		case 1:
			if ((active0 & 0xfe00000000000000L) != 0L || (active1 & 0x3fL) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 1;
				return 388;
			}
			return -1;
		case 2:
			if ((active0 & 0xfe00000000000000L) != 0L || (active1 & 0x3fL) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 2;
				return 388;
			}
			return -1;
		case 3:
			if ((active1 & 0x1L) != 0L)
				return 388;
			if ((active0 & 0xfe00000000000000L) != 0L || (active1 & 0x3eL) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 3;
				return 388;
			}
			return -1;
		case 4:
			if ((active0 & 0xf600000000000000L) != 0L || (active1 & 0x36L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 4;
				return 388;
			}
			if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x8L) != 0L)
				return 388;
			return -1;
		case 5:
			if ((active0 & 0xf200000000000000L) != 0L || (active1 & 0x34L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 5;
				return 388;
			}
			if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x2L) != 0L)
				return 388;
			return -1;
		case 6:
			if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x4L) != 0L)
				return 388;
			if ((active0 & 0xf000000000000000L) != 0L || (active1 & 0x30L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 6;
				return 388;
			}
			return -1;
		case 7:
			if ((active0 & 0x7000000000000000L) != 0L || (active1 & 0x20L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 7;
				return 388;
			}
			if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x10L) != 0L)
				return 388;
			return -1;
		case 8:
			if ((active0 & 0x7000000000000000L) != 0L || (active1 & 0x20L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 8;
				return 388;
			}
			return -1;
		case 9:
			if ((active0 & 0x1000000000000000L) != 0L)
				return 388;
			if ((active0 & 0x6000000000000000L) != 0L || (active1 & 0x20L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 9;
				return 388;
			}
			return -1;
		case 10:
			if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x20L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 10;
				return 388;
			}
			if ((active0 & 0x2000000000000000L) != 0L)
				return 388;
			return -1;
		case 11:
			if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x20L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 11;
				return 388;
			}
			return -1;
		case 12:
			if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x20L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 12;
				return 388;
			}
			return -1;
		case 13:
			if ((active1 & 0x20L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 13;
				return 388;
			}
			if ((active0 & 0x4000000000000000L) != 0L)
				return 388;
			return -1;
		case 14:
			if ((active1 & 0x20L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 14;
				return 388;
			}
			return -1;
		case 15:
			if ((active1 & 0x20L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 15;
				return 388;
			}
			return -1;
		case 16:
			if ((active1 & 0x20L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 16;
				return 388;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_0(int pos, long active0, long active1) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
	}

	private final int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	private final int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 36:
			return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
		case 40:
			return jjStopAtPos(0, 27);
		case 41:
			return jjStopAtPos(0, 26);
		case 42:
			jjmatchedKind = 24;
			return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
		case 43:
			return jjStopAtPos(0, 16);
		case 44:
			return jjStopAtPos(0, 18);
		case 45:
			jjmatchedKind = 17;
			return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
		case 46:
			return jjStartNfaWithStates_0(0, 25, 218);
		case 47:
			jjmatchedKind = 21;
			return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
		case 58:
			jjmatchedKind = 28;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
		case 59:
			return jjStopAtPos(0, 19);
		case 60:
			return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
		case 61:
			return jjStopAtPos(0, 15);
		case 62:
			return jjStopAtPos(0, 20);
		case 64:
			return jjMoveStringLiteralDfa1_0(0xfe00000000000000L, 0x3fL);
		case 91:
			return jjStopAtPos(0, 22);
		case 93:
			return jjStopAtPos(0, 23);
		case 94:
			return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
		case 123:
			return jjStopAtPos(0, 7);
		case 124:
			return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
		case 125:
			return jjStopAtPos(0, 8);
		case 126:
			jjmatchedKind = 14;
			return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
		default:
			return jjMoveNfa_0(1, 0);
		}
	}

	private final int jjMoveStringLiteralDfa1_0(long active0, long active1) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0, active1);
			return 1;
		}
		switch (curChar) {
		case 33:
			return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0L);
		case 42:
			if ((active0 & 0x4L) != 0L)
				return jjStopAtPos(1, 2);
			break;
		case 45:
			return jjMoveStringLiteralDfa2_0(active0, 0x40L, active1, 0L);
		case 58:
			if ((active1 & 0x80000L) != 0L)
				return jjStopAtPos(1, 83);
			break;
		case 61:
			if ((active0 & 0x200L) != 0L)
				return jjStopAtPos(1, 9);
			else if ((active0 & 0x400L) != 0L)
				return jjStopAtPos(1, 10);
			else if ((active0 & 0x800L) != 0L)
				return jjStopAtPos(1, 11);
			else if ((active0 & 0x1000L) != 0L)
				return jjStopAtPos(1, 12);
			else if ((active0 & 0x2000L) != 0L)
				return jjStopAtPos(1, 13);
			break;
		case 66:
		case 98:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000000L, active1, 0x10L);
		case 70:
		case 102:
			return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa2_0(active0, 0x2800000000000000L, active1, 0x20L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
		default:
			break;
		}
		return jjStartNfa_0(0, active0, active1);
	}

	private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(0, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0, active1);
			return 2;
		}
		switch (curChar) {
		case 45:
			return jjMoveStringLiteralDfa3_0(active0, 0x20L, active1, 0L);
		case 62:
			if ((active0 & 0x40L) != 0L)
				return jjStopAtPos(2, 6);
			break;
		case 65:
		case 97:
			return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x8L);
		case 72:
		case 104:
			return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x20L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa3_0(active0, 0x5000000000000000L, active1, 0x15L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(1, active0, active1);
	}

	private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(1, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0, active1);
			return 3;
		}
		switch (curChar) {
		case 45:
			if ((active0 & 0x20L) != 0L)
				return jjStopAtPos(3, 5);
			break;
		case 65:
		case 97:
			return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
		case 70:
		case 102:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
		case 71:
		case 103:
			return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x2L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);
		case 80:
		case 112:
			if ((active1 & 0x1L) != 0L)
				return jjStartNfaWithStates_0(3, 64, 388);
			return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0, active1);
	}

	private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(2, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0, active1);
			return 4;
		}
		switch (curChar) {
		case 69:
		case 101:
			if ((active0 & 0x800000000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 59, 388);
			break;
		case 70:
		case 102:
			return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
		case 72:
		case 104:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x30L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa5_0(active0, 0x4200000000000000L, active1, 0L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
		case 84:
		case 116:
			if ((active1 & 0x8L) != 0L)
				return jjStartNfaWithStates_0(4, 67, 388);
			return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0x4L);
		default:
			break;
		}
		return jjStartNfa_0(3, active0, active1);
	}

	private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(3, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0, active1);
			return 5;
		}
		switch (curChar) {
		case 45:
			return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
		case 65:
		case 97:
			if ((active0 & 0x400000000000000L) != 0L)
				return jjStartNfaWithStates_0(5, 58, 388);
			break;
		case 69:
		case 101:
			return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0x20L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa6_0(active0, 0x4200000000000000L, active1, 0L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L);
		case 84:
		case 116:
			if ((active1 & 0x2L) != 0L)
				return jjStartNfaWithStates_0(5, 65, 388);
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
		default:
			break;
		}
		return jjStartNfa_0(4, active0, active1);
	}

	private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(4, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0, active1);
			return 6;
		}
		switch (curChar) {
		case 45:
			return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0x10L);
		case 70:
		case 102:
			return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L);
		case 77:
		case 109:
			if ((active1 & 0x4L) != 0L)
				return jjStartNfaWithStates_0(6, 66, 388);
			break;
		case 82:
		case 114:
			return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
		case 84:
		case 116:
			if ((active0 & 0x200000000000000L) != 0L)
				return jjStartNfaWithStates_0(6, 57, 388);
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
		default:
			break;
		}
		return jjStartNfa_0(5, active0, active1);
	}

	private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(5, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0, active1);
			return 7;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
		case 82:
		case 114:
			if ((active1 & 0x10L) != 0L)
				return jjStartNfaWithStates_0(7, 68, 388);
			break;
		case 84:
		case 116:
			if ((active0 & 0x8000000000000000L) != 0L)
				return jjStartNfaWithStates_0(7, 63, 388);
			break;
		default:
			break;
		}
		return jjStartNfa_0(6, active0, active1);
	}

	private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(6, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0, active1);
			return 8;
		}
		switch (curChar) {
		case 67:
		case 99:
			return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active1, 0x20L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(7, active0, active1);
	}

	private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(7, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0, active1);
			return 9;
		}
		switch (curChar) {
		case 45:
			return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20L);
		case 67:
		case 99:
			return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L, active1, 0L);
		case 69:
		case 101:
			if ((active0 & 0x1000000000000000L) != 0L)
				return jjStartNfaWithStates_0(9, 60, 388);
			break;
		case 79:
		case 111:
			return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(8, active0, active1);
	}

	private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(8, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0, active1);
			return 10;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20L);
		case 69:
		case 101:
			if ((active0 & 0x2000000000000000L) != 0L)
				return jjStartNfaWithStates_0(10, 61, 388);
			break;
		case 70:
		case 102:
			return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(9, active0, active1);
	}

	private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(9, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(10, active0, active1);
			return 11;
		}
		switch (curChar) {
		case 73:
		case 105:
			return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20L);
		default:
			break;
		}
		return jjStartNfa_0(10, active0, active1);
	}

	private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(10, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(11, active0, active1);
			return 12;
		}
		switch (curChar) {
		case 76:
		case 108:
			return jjMoveStringLiteralDfa13_0(active0, 0x4000000000000000L, active1, 0L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20L);
		default:
			break;
		}
		return jjStartNfa_0(11, active0, active1);
	}

	private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(11, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(12, active0, active1);
			return 13;
		}
		switch (curChar) {
		case 69:
		case 101:
			if ((active0 & 0x4000000000000000L) != 0L)
				return jjStartNfaWithStates_0(13, 62, 388);
			break;
		case 72:
		case 104:
			return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x20L);
		default:
			break;
		}
		return jjStartNfa_0(12, active0, active1);
	}

	private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(12, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(13, 0L, active1);
			return 14;
		}
		switch (curChar) {
		case 65:
		case 97:
			return jjMoveStringLiteralDfa15_0(active1, 0x20L);
		default:
			break;
		}
		return jjStartNfa_0(13, 0L, active1);
	}

	private final int jjMoveStringLiteralDfa15_0(long old1, long active1) {
		if (((active1 &= old1)) == 0L)
			return jjStartNfa_0(13, 0L, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(14, 0L, active1);
			return 15;
		}
		switch (curChar) {
		case 66:
		case 98:
			return jjMoveStringLiteralDfa16_0(active1, 0x20L);
		default:
			break;
		}
		return jjStartNfa_0(14, 0L, active1);
	}

	private final int jjMoveStringLiteralDfa16_0(long old1, long active1) {
		if (((active1 &= old1)) == 0L)
			return jjStartNfa_0(14, 0L, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(15, 0L, active1);
			return 16;
		}
		switch (curChar) {
		case 69:
		case 101:
			return jjMoveStringLiteralDfa17_0(active1, 0x20L);
		default:
			break;
		}
		return jjStartNfa_0(15, 0L, active1);
	}

	private final int jjMoveStringLiteralDfa17_0(long old1, long active1) {
		if (((active1 &= old1)) == 0L)
			return jjStartNfa_0(15, 0L, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(16, 0L, active1);
			return 17;
		}
		switch (curChar) {
		case 84:
		case 116:
			if ((active1 & 0x20L) != 0L)
				return jjStartNfaWithStates_0(17, 69, 388);
			break;
		default:
			break;
		}
		return jjStartNfa_0(16, 0L, active1);
	}

	private final void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private final void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private final void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private final void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

	private final void jjCheckNAddStates(int start) {
		jjCheckNAdd(jjnextStates[start]);
		jjCheckNAdd(jjnextStates[start + 1]);
	}
	static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

	private final int jjMoveNfa_0(int startState, int curPos) {
		int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 388;
		int i = 1;
		jjstateSet[0] = startState;
		int j, kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 1:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 42)
								kind = 42;
							jjCheckNAddStates(0, 78);
						} else if ((0x100003600L & l) != 0L) {
							if (kind > 1)
								kind = 1;
							jjCheckNAdd(0);
						} else if (curChar == 46)
							jjCheckNAddStates(79, 100);
						else if (curChar == 45)
							jjAddStates(101, 104);
						else if (curChar == 33)
							jjCheckNAddTwoStates(44, 53);
						else if (curChar == 35)
							jjCheckNAddTwoStates(33, 34);
						else if (curChar == 39)
							jjCheckNAddStates(105, 108);
						else if (curChar == 34)
							jjCheckNAddStates(109, 112);
						break;
					case 55:
						if (curChar == 45)
							jjAddStates(113, 114);
						break;
					case 388:
					case 57:
						if ((0x3ff200000000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddTwoStates(57, 58);
						break;
					case 218:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(115, 118);
						else if (curChar == 45)
							jjCheckNAddTwoStates(219, 230);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(185, 186);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(178, 179);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(175, 177);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(172, 174);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(170, 171);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(167, 169);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(119, 122);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(154, 156);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(151, 153);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(148, 150);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(145, 147);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(142, 144);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(139, 141);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(137, 138);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(134, 136);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(131, 133);
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(129, 130);
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 42)
								kind = 42;
							jjCheckNAdd(128);
						}
						break;
					case 0:
						if ((0x100003600L & l) == 0L)
							break;
						if (kind > 1)
							kind = 1;
						jjCheckNAdd(0);
						break;
					case 2:
						if (curChar == 34)
							jjCheckNAddStates(109, 112);
						break;
					case 3:
						if ((0xfffffffb00000200L & l) != 0L)
							jjCheckNAddStates(109, 112);
						break;
					case 4:
						if (curChar == 34 && kind > 40)
							kind = 40;
						break;
					case 6:
						if (curChar == 10)
							jjCheckNAddStates(109, 112);
						break;
					case 8:
						if ((0xffffffff00000000L & l) != 0L)
							jjCheckNAddStates(109, 112);
						break;
					case 9:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(123, 128);
						break;
					case 10:
						if ((0x100003600L & l) != 0L)
							jjCheckNAddStates(109, 112);
						break;
					case 11:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(129, 137);
						break;
					case 12:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(138, 142);
						break;
					case 13:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(143, 148);
						break;
					case 14:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(149, 155);
						break;
					case 15:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(156, 163);
						break;
					case 16:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 6;
						break;
					case 17:
						if (curChar == 39)
							jjCheckNAddStates(105, 108);
						break;
					case 18:
						if ((0xffffff7f00000200L & l) != 0L)
							jjCheckNAddStates(105, 108);
						break;
					case 19:
						if (curChar == 39 && kind > 40)
							kind = 40;
						break;
					case 21:
						if (curChar == 10)
							jjCheckNAddStates(105, 108);
						break;
					case 23:
						if ((0xffffffff00000000L & l) != 0L)
							jjCheckNAddStates(105, 108);
						break;
					case 24:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(164, 169);
						break;
					case 25:
						if ((0x100003600L & l) != 0L)
							jjCheckNAddStates(105, 108);
						break;
					case 26:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(170, 178);
						break;
					case 27:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(179, 183);
						break;
					case 28:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(184, 189);
						break;
					case 29:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(190, 196);
						break;
					case 30:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(197, 204);
						break;
					case 31:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 21;
						break;
					case 32:
						if (curChar == 35)
							jjCheckNAddTwoStates(33, 34);
						break;
					case 33:
						if ((0x3ff200000000000L & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddTwoStates(33, 34);
						break;
					case 35:
						if ((0xffffffff00000000L & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddTwoStates(33, 34);
						break;
					case 36:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddStates(205, 208);
						break;
					case 37:
						if ((0x100003600L & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddTwoStates(33, 34);
						break;
					case 38:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddStates(209, 215);
						break;
					case 39:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddStates(216, 218);
						break;
					case 40:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddStates(219, 222);
						break;
					case 41:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddStates(223, 227);
						break;
					case 42:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddStates(228, 233);
						break;
					case 43:
						if (curChar == 33)
							jjCheckNAddTwoStates(44, 53);
						break;
					case 44:
						if ((0x100003600L & l) != 0L)
							jjCheckNAddTwoStates(44, 53);
						break;
					case 59:
						if ((0xffffffff00000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddTwoStates(57, 58);
						break;
					case 60:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(234, 237);
						break;
					case 61:
						if ((0x100003600L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddTwoStates(57, 58);
						break;
					case 62:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(238, 244);
						break;
					case 63:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(245, 247);
						break;
					case 64:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(248, 251);
						break;
					case 65:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(252, 256);
						break;
					case 66:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(257, 262);
						break;
					case 68:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(263, 266);
						break;
					case 69:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(267, 273);
						break;
					case 70:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(274, 276);
						break;
					case 71:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(277, 280);
						break;
					case 72:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(281, 285);
						break;
					case 73:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(286, 291);
						break;
					case 88:
						if (curChar == 45)
							jjAddStates(101, 104);
						break;
					case 90:
						if ((0x3ff200000000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddTwoStates(90, 91);
						break;
					case 92:
						if ((0xffffffff00000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddTwoStates(90, 91);
						break;
					case 93:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(292, 295);
						break;
					case 94:
						if ((0x100003600L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddTwoStates(90, 91);
						break;
					case 95:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(296, 302);
						break;
					case 96:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(303, 305);
						break;
					case 97:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(306, 309);
						break;
					case 98:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(310, 314);
						break;
					case 99:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(315, 320);
						break;
					case 101:
						if ((0x3ff200000000000L & l) != 0L)
							jjCheckNAddStates(321, 323);
						break;
					case 102:
						if (curChar == 40 && kind > 82)
							kind = 82;
						break;
					case 104:
						if ((0xffffffff00000000L & l) != 0L)
							jjCheckNAddStates(321, 323);
						break;
					case 105:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(324, 328);
						break;
					case 106:
						if ((0x100003600L & l) != 0L)
							jjCheckNAddStates(321, 323);
						break;
					case 107:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(329, 336);
						break;
					case 108:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(337, 340);
						break;
					case 109:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(341, 345);
						break;
					case 110:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(346, 351);
						break;
					case 111:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(352, 358);
						break;
					case 113:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(359, 363);
						break;
					case 114:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(364, 371);
						break;
					case 115:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(372, 375);
						break;
					case 116:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(376, 380);
						break;
					case 117:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(381, 386);
						break;
					case 118:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(387, 393);
						break;
					case 120:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(394, 397);
						break;
					case 121:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(398, 404);
						break;
					case 122:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(405, 407);
						break;
					case 123:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(408, 411);
						break;
					case 124:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(412, 416);
						break;
					case 125:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(417, 422);
						break;
					case 127:
						if (curChar == 46)
							jjCheckNAddStates(79, 100);
						break;
					case 128:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 42)
							kind = 42;
						jjCheckNAdd(128);
						break;
					case 129:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(129, 130);
						break;
					case 130:
						if (curChar == 37 && kind > 45)
							kind = 45;
						break;
					case 131:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(131, 133);
						break;
					case 134:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(134, 136);
						break;
					case 137:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(137, 138);
						break;
					case 139:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(139, 141);
						break;
					case 142:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(142, 144);
						break;
					case 145:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(145, 147);
						break;
					case 148:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(148, 150);
						break;
					case 151:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(151, 153);
						break;
					case 154:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(154, 156);
						break;
					case 157:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(119, 122);
						break;
					case 167:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(167, 169);
						break;
					case 170:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(170, 171);
						break;
					case 172:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(172, 174);
						break;
					case 175:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(175, 177);
						break;
					case 178:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(178, 179);
						break;
					case 185:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(185, 186);
						break;
					case 186:
						if (curChar == 47)
							jjCheckNAddTwoStates(187, 195);
						break;
					case 187:
						if (curChar == 46)
							jjCheckNAdd(188);
						break;
					case 188:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(188, 189);
						break;
					case 189:
						if (curChar == 47)
							jjCheckNAddTwoStates(190, 192);
						break;
					case 190:
						if (curChar == 46)
							jjCheckNAdd(191);
						break;
					case 191:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 53)
							kind = 53;
						jjCheckNAdd(191);
						break;
					case 192:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 53)
							kind = 53;
						jjCheckNAddStates(423, 425);
						break;
					case 193:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 53)
							kind = 53;
						jjCheckNAdd(193);
						break;
					case 194:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(194, 190);
						break;
					case 195:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(426, 429);
						break;
					case 196:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(196, 189);
						break;
					case 197:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(197, 187);
						break;
					case 198:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(115, 118);
						break;
					case 199:
						if (curChar == 45)
							jjCheckNAddTwoStates(200, 211);
						break;
					case 201:
						if ((0x3ff200000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddTwoStates(201, 202);
						break;
					case 203:
						if ((0xffffffff00000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddTwoStates(201, 202);
						break;
					case 204:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(430, 433);
						break;
					case 205:
						if ((0x100003600L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddTwoStates(201, 202);
						break;
					case 206:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(434, 440);
						break;
					case 207:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(441, 443);
						break;
					case 208:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(444, 447);
						break;
					case 209:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(448, 452);
						break;
					case 210:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(453, 458);
						break;
					case 212:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(459, 462);
						break;
					case 213:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(463, 469);
						break;
					case 214:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(470, 472);
						break;
					case 215:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(473, 476);
						break;
					case 216:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(477, 481);
						break;
					case 217:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(482, 487);
						break;
					case 220:
						if ((0x3ff200000000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddTwoStates(220, 221);
						break;
					case 222:
						if ((0xffffffff00000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddTwoStates(220, 221);
						break;
					case 223:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(488, 491);
						break;
					case 224:
						if ((0x100003600L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddTwoStates(220, 221);
						break;
					case 225:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(492, 498);
						break;
					case 226:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(499, 501);
						break;
					case 227:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(502, 505);
						break;
					case 228:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(506, 510);
						break;
					case 229:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(511, 516);
						break;
					case 231:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(517, 520);
						break;
					case 232:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(521, 527);
						break;
					case 233:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(528, 530);
						break;
					case 234:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(531, 534);
						break;
					case 235:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(535, 539);
						break;
					case 236:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(540, 545);
						break;
					case 238:
						if (curChar == 40)
							jjCheckNAddStates(546, 551);
						break;
					case 239:
						if ((0xfffffc7a00000000L & l) != 0L)
							jjCheckNAddStates(552, 555);
						break;
					case 240:
						if ((0x100003600L & l) != 0L)
							jjCheckNAddTwoStates(240, 241);
						break;
					case 241:
						if (curChar == 41 && kind > 44)
							kind = 44;
						break;
					case 243:
						if ((0xffffffff00000000L & l) != 0L)
							jjCheckNAddStates(552, 555);
						break;
					case 244:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(556, 560);
						break;
					case 245:
						if ((0x100003600L & l) != 0L)
							jjCheckNAddStates(552, 555);
						break;
					case 246:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(561, 568);
						break;
					case 247:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(569, 572);
						break;
					case 248:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(573, 577);
						break;
					case 249:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(578, 583);
						break;
					case 250:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(584, 590);
						break;
					case 251:
						if (curChar == 39)
							jjCheckNAddStates(591, 594);
						break;
					case 252:
						if ((0xffffff7f00000200L & l) != 0L)
							jjCheckNAddStates(591, 594);
						break;
					case 253:
						if (curChar == 39)
							jjCheckNAddTwoStates(240, 241);
						break;
					case 255:
						if (curChar == 10)
							jjCheckNAddStates(591, 594);
						break;
					case 257:
						if ((0xffffffff00000000L & l) != 0L)
							jjCheckNAddStates(591, 594);
						break;
					case 258:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(595, 600);
						break;
					case 259:
						if ((0x100003600L & l) != 0L)
							jjCheckNAddStates(591, 594);
						break;
					case 260:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(601, 609);
						break;
					case 261:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(610, 614);
						break;
					case 262:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(615, 620);
						break;
					case 263:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(621, 627);
						break;
					case 264:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(628, 635);
						break;
					case 265:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 255;
						break;
					case 266:
						if (curChar == 34)
							jjCheckNAddStates(636, 639);
						break;
					case 267:
						if ((0xfffffffb00000200L & l) != 0L)
							jjCheckNAddStates(636, 639);
						break;
					case 268:
						if (curChar == 34)
							jjCheckNAddTwoStates(240, 241);
						break;
					case 270:
						if (curChar == 10)
							jjCheckNAddStates(636, 639);
						break;
					case 272:
						if ((0xffffffff00000000L & l) != 0L)
							jjCheckNAddStates(636, 639);
						break;
					case 273:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(640, 645);
						break;
					case 274:
						if ((0x100003600L & l) != 0L)
							jjCheckNAddStates(636, 639);
						break;
					case 275:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(646, 654);
						break;
					case 276:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(655, 659);
						break;
					case 277:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(660, 665);
						break;
					case 278:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(666, 672);
						break;
					case 279:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(673, 680);
						break;
					case 280:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 270;
						break;
					case 281:
						if ((0x100003600L & l) != 0L)
							jjCheckNAddStates(681, 687);
						break;
					case 284:
						if (curChar == 43)
							jjAddStates(688, 689);
						break;
					case 285:
						if (curChar != 63)
							break;
						if (kind > 80)
							kind = 80;
						jjstateSet[jjnewStateCnt++] = 286;
						break;
					case 286:
						if (curChar != 63)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddStates(690, 693);
						break;
					case 287:
						if (curChar == 63 && kind > 80)
							kind = 80;
						break;
					case 288:
					case 303:
					case 307:
					case 310:
					case 313:
						if (curChar != 63)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAdd(287);
						break;
					case 289:
						if (curChar != 63)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddTwoStates(287, 288);
						break;
					case 290:
						if (curChar != 63)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddStates(694, 696);
						break;
					case 291:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjAddStates(697, 702);
						break;
					case 292:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 293;
						break;
					case 293:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 294;
						break;
					case 294:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAdd(295);
						break;
					case 295:
						if ((0x3ff000000000000L & l) != 0L && kind > 80)
							kind = 80;
						break;
					case 296:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 297;
						break;
					case 297:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 298;
						break;
					case 298:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 299;
						break;
					case 299:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAdd(287);
						break;
					case 300:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 301;
						break;
					case 301:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 302;
						break;
					case 302:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjstateSet[jjnewStateCnt++] = 303;
						break;
					case 304:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 305;
						break;
					case 305:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjstateSet[jjnewStateCnt++] = 306;
						break;
					case 306:
						if (curChar != 63)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddTwoStates(287, 307);
						break;
					case 308:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjstateSet[jjnewStateCnt++] = 309;
						break;
					case 309:
						if (curChar != 63)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddStates(703, 705);
						break;
					case 311:
						if (curChar != 63)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddTwoStates(287, 310);
						break;
					case 312:
						if (curChar != 63)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddStates(706, 709);
						break;
					case 314:
						if (curChar != 63)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddTwoStates(287, 313);
						break;
					case 315:
						if (curChar != 63)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddStates(710, 712);
						break;
					case 316:
						if (curChar == 43)
							jjstateSet[jjnewStateCnt++] = 317;
						break;
					case 317:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(318, 324);
						break;
					case 318:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 319;
						break;
					case 319:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjstateSet[jjnewStateCnt++] = 320;
						break;
					case 320:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddStates(713, 716);
						break;
					case 321:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAdd(295);
						break;
					case 322:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddTwoStates(295, 321);
						break;
					case 323:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddStates(717, 719);
						break;
					case 324:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(720, 724);
						break;
					case 325:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAdd(318);
						break;
					case 326:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(325, 318);
						break;
					case 327:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(725, 727);
						break;
					case 328:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(728, 731);
						break;
					case 330:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 42)
							kind = 42;
						jjCheckNAddStates(0, 78);
						break;
					case 331:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 42)
							kind = 42;
						jjCheckNAdd(331);
						break;
					case 332:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(332, 333);
						break;
					case 333:
						if (curChar == 46)
							jjCheckNAdd(128);
						break;
					case 334:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(334, 130);
						break;
					case 335:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(335, 336);
						break;
					case 336:
						if (curChar == 46)
							jjCheckNAdd(129);
						break;
					case 337:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(337, 133);
						break;
					case 338:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(338, 339);
						break;
					case 339:
						if (curChar == 46)
							jjCheckNAdd(131);
						break;
					case 340:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(340, 136);
						break;
					case 341:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(341, 342);
						break;
					case 342:
						if (curChar == 46)
							jjCheckNAdd(134);
						break;
					case 343:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(343, 138);
						break;
					case 344:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(344, 345);
						break;
					case 345:
						if (curChar == 46)
							jjCheckNAdd(137);
						break;
					case 346:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(346, 141);
						break;
					case 347:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(347, 348);
						break;
					case 348:
						if (curChar == 46)
							jjCheckNAdd(139);
						break;
					case 349:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(349, 144);
						break;
					case 350:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(350, 351);
						break;
					case 351:
						if (curChar == 46)
							jjCheckNAdd(142);
						break;
					case 352:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(352, 147);
						break;
					case 353:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(353, 354);
						break;
					case 354:
						if (curChar == 46)
							jjCheckNAdd(145);
						break;
					case 355:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(355, 150);
						break;
					case 356:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(356, 357);
						break;
					case 357:
						if (curChar == 46)
							jjCheckNAdd(148);
						break;
					case 358:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(358, 153);
						break;
					case 359:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(359, 360);
						break;
					case 360:
						if (curChar == 46)
							jjCheckNAdd(151);
						break;
					case 361:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(361, 156);
						break;
					case 362:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(362, 363);
						break;
					case 363:
						if (curChar == 46)
							jjCheckNAdd(154);
						break;
					case 364:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(732, 735);
						break;
					case 365:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(365, 366);
						break;
					case 366:
						if (curChar == 46)
							jjCheckNAdd(157);
						break;
					case 367:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(367, 169);
						break;
					case 368:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(368, 369);
						break;
					case 369:
						if (curChar == 46)
							jjCheckNAdd(167);
						break;
					case 370:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(370, 171);
						break;
					case 371:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(371, 372);
						break;
					case 372:
						if (curChar == 46)
							jjCheckNAdd(170);
						break;
					case 373:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(373, 174);
						break;
					case 374:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(374, 375);
						break;
					case 375:
						if (curChar == 46)
							jjCheckNAdd(172);
						break;
					case 376:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(376, 177);
						break;
					case 377:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(377, 378);
						break;
					case 378:
						if (curChar == 46)
							jjCheckNAdd(175);
						break;
					case 379:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(379, 179);
						break;
					case 380:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(380, 381);
						break;
					case 381:
						if (curChar == 46)
							jjCheckNAdd(178);
						break;
					case 382:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(382, 186);
						break;
					case 383:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(383, 384);
						break;
					case 384:
						if (curChar == 46)
							jjCheckNAdd(185);
						break;
					case 385:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(736, 739);
						break;
					case 386:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(386, 387);
						break;
					case 387:
						if (curChar == 46)
							jjCheckNAdd(198);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 89:
						if ((0x7fffffe87fffffeL & l) != 0L)
							jjCheckNAddStates(321, 323);
						else if (curChar == 92)
							jjCheckNAddTwoStates(92, 120);
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 41)
								kind = 41;
							jjCheckNAddTwoStates(90, 91);
						} else if (curChar == 92)
							jjCheckNAddTwoStates(104, 113);
						break;
					case 1:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 41)
								kind = 41;
							jjCheckNAddStates(740, 744);
						} else if (curChar == 92)
							jjCheckNAddStates(745, 748);
						else if (curChar == 64)
							jjAddStates(749, 751);
						if ((0x20000000200000L & l) != 0L)
							jjAddStates(752, 754);
						else if ((0x200000002L & l) != 0L)
							jjAddStates(755, 756);
						else if ((0x400000004000L & l) != 0L)
							jjAddStates(757, 758);
						else if ((0x800000008000L & l) != 0L)
							jjAddStates(759, 760);
						break;
					case 55:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 70)
								kind = 70;
							jjCheckNAddTwoStates(57, 58);
						} else if (curChar == 92)
							jjCheckNAddTwoStates(59, 68);
						break;
					case 388:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 70)
								kind = 70;
							jjCheckNAddTwoStates(57, 58);
						} else if (curChar == 92)
							jjCheckNAddTwoStates(59, 60);
						break;
					case 218:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 81)
								kind = 81;
							jjCheckNAddTwoStates(220, 221);
						} else if (curChar == 92)
							jjCheckNAddTwoStates(222, 231);
						break;
					case 3:
						if ((0x7fffffffefffffffL & l) != 0L)
							jjCheckNAddStates(109, 112);
						break;
					case 5:
						if (curChar == 92)
							jjAddStates(761, 762);
						break;
					case 7:
						if (curChar == 92)
							jjAddStates(763, 764);
						break;
					case 8:
						if ((0x7fffffffffffffffL & l) != 0L)
							jjCheckNAddStates(109, 112);
						break;
					case 9:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(123, 128);
						break;
					case 11:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(129, 137);
						break;
					case 12:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(138, 142);
						break;
					case 13:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(143, 148);
						break;
					case 14:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(149, 155);
						break;
					case 15:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(156, 163);
						break;
					case 18:
						if ((0x7fffffffefffffffL & l) != 0L)
							jjCheckNAddStates(105, 108);
						break;
					case 20:
						if (curChar == 92)
							jjAddStates(765, 766);
						break;
					case 22:
						if (curChar == 92)
							jjAddStates(767, 768);
						break;
					case 23:
						if ((0x7fffffffffffffffL & l) != 0L)
							jjCheckNAddStates(105, 108);
						break;
					case 24:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(164, 169);
						break;
					case 26:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(170, 178);
						break;
					case 27:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(179, 183);
						break;
					case 28:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(184, 189);
						break;
					case 29:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(190, 196);
						break;
					case 30:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(197, 204);
						break;
					case 33:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddTwoStates(33, 34);
						break;
					case 34:
						if (curChar == 92)
							jjAddStates(769, 770);
						break;
					case 35:
						if ((0x7fffffffffffffffL & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddTwoStates(33, 34);
						break;
					case 36:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddStates(205, 208);
						break;
					case 38:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddStates(209, 215);
						break;
					case 39:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddStates(216, 218);
						break;
					case 40:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddStates(219, 222);
						break;
					case 41:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddStates(223, 227);
						break;
					case 42:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddStates(228, 233);
						break;
					case 45:
						if ((0x10000000100000L & l) != 0L && kind > 56)
							kind = 56;
						break;
					case 46:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 45;
						break;
					case 47:
						if ((0x200000002L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 46;
						break;
					case 48:
						if ((0x10000000100000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 47;
						break;
					case 49:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 48;
						break;
					case 50:
						if ((0x800000008000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 49;
						break;
					case 51:
						if ((0x1000000010000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 50;
						break;
					case 52:
						if ((0x200000002000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 51;
						break;
					case 53:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 52;
						break;
					case 54:
						if (curChar == 64)
							jjAddStates(749, 751);
						break;
					case 56:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddTwoStates(57, 58);
						break;
					case 57:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddTwoStates(57, 58);
						break;
					case 58:
						if (curChar == 92)
							jjCheckNAddTwoStates(59, 60);
						break;
					case 59:
						if ((0x7fffffffffffffffL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddTwoStates(57, 58);
						break;
					case 60:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(234, 237);
						break;
					case 62:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(238, 244);
						break;
					case 63:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(245, 247);
						break;
					case 64:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(248, 251);
						break;
					case 65:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(252, 256);
						break;
					case 66:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(257, 262);
						break;
					case 67:
						if (curChar == 92)
							jjCheckNAddTwoStates(59, 68);
						break;
					case 68:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(263, 266);
						break;
					case 69:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(267, 273);
						break;
					case 70:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(274, 276);
						break;
					case 71:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(277, 280);
						break;
					case 72:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(281, 285);
						break;
					case 73:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddStates(286, 291);
						break;
					case 74:
						if ((0x800000008000L & l) != 0L)
							jjAddStates(759, 760);
						break;
					case 75:
						if ((0x200000002000000L & l) != 0L && kind > 30)
							kind = 30;
						break;
					case 76:
					case 78:
						if ((0x100000001000L & l) != 0L)
							jjCheckNAdd(75);
						break;
					case 77:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 76;
						break;
					case 79:
						if ((0x400000004000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 78;
						break;
					case 80:
						if ((0x400000004000L & l) != 0L)
							jjAddStates(757, 758);
						break;
					case 81:
						if ((0x10000000100000L & l) != 0L && kind > 30)
							kind = 30;
						break;
					case 82:
					case 83:
						if ((0x800000008000L & l) != 0L)
							jjCheckNAdd(81);
						break;
					case 84:
						if ((0x200000002L & l) != 0L)
							jjAddStates(755, 756);
						break;
					case 85:
						if ((0x1000000010L & l) != 0L && kind > 29)
							kind = 29;
						break;
					case 86:
					case 87:
						if ((0x400000004000L & l) != 0L)
							jjCheckNAdd(85);
						break;
					case 90:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddTwoStates(90, 91);
						break;
					case 91:
						if (curChar == 92)
							jjCheckNAddTwoStates(92, 93);
						break;
					case 92:
						if ((0x7fffffffffffffffL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddTwoStates(90, 91);
						break;
					case 93:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(292, 295);
						break;
					case 95:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(296, 302);
						break;
					case 96:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(303, 305);
						break;
					case 97:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(306, 309);
						break;
					case 98:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(310, 314);
						break;
					case 99:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(315, 320);
						break;
					case 100:
					case 101:
						if ((0x7fffffe87fffffeL & l) != 0L)
							jjCheckNAddStates(321, 323);
						break;
					case 103:
						if (curChar == 92)
							jjCheckNAddTwoStates(104, 105);
						break;
					case 104:
						if ((0x7fffffffffffffffL & l) != 0L)
							jjCheckNAddStates(321, 323);
						break;
					case 105:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(324, 328);
						break;
					case 107:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(329, 336);
						break;
					case 108:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(337, 340);
						break;
					case 109:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(341, 345);
						break;
					case 110:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(346, 351);
						break;
					case 111:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(352, 358);
						break;
					case 112:
						if (curChar == 92)
							jjCheckNAddTwoStates(104, 113);
						break;
					case 113:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(359, 363);
						break;
					case 114:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(364, 371);
						break;
					case 115:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(372, 375);
						break;
					case 116:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(376, 380);
						break;
					case 117:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(381, 386);
						break;
					case 118:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(387, 393);
						break;
					case 119:
						if (curChar == 92)
							jjCheckNAddTwoStates(92, 120);
						break;
					case 120:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(394, 397);
						break;
					case 121:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(398, 404);
						break;
					case 122:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(405, 407);
						break;
					case 123:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(408, 411);
						break;
					case 124:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(412, 416);
						break;
					case 125:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(417, 422);
						break;
					case 126:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(740, 744);
						break;
					case 132:
						if ((0x10000000100000L & l) != 0L && kind > 46)
							kind = 46;
						break;
					case 133:
						if ((0x1000000010000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 132;
						break;
					case 135:
						if ((0x200000002000L & l) != 0L && kind > 46)
							kind = 46;
						break;
					case 136:
						if ((0x200000002000L & l) != 0L)
							jjCheckNAdd(135);
						break;
					case 138:
						if ((0x800000008L & l) != 0L)
							jjCheckNAdd(135);
						break;
					case 140:
						if ((0x800000008L & l) != 0L && kind > 46)
							kind = 46;
						break;
					case 141:
						if ((0x1000000010000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 140;
						break;
					case 143:
						if ((0x400000004000L & l) != 0L && kind > 46)
							kind = 46;
						break;
					case 144:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 143;
						break;
					case 146:
						if ((0x1000000010L & l) != 0L && kind > 46)
							kind = 46;
						break;
					case 147:
						if ((0x8000000080L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 146;
						break;
					case 149:
						if ((0x100000001000000L & l) != 0L && kind > 46)
							kind = 46;
						break;
					case 150:
						if ((0x1000000010000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 149;
						break;
					case 152:
						if ((0x200000002000L & l) != 0L && kind > 47)
							kind = 47;
						break;
					case 153:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 152;
						break;
					case 155:
						if ((0x100000001000000L & l) != 0L && kind > 48)
							kind = 48;
						break;
					case 156:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 155;
						break;
					case 158:
						if ((0x8000000080L & l) != 0L && kind > 49)
							kind = 49;
						break;
					case 159:
						if ((0x2000000020L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 158;
						break;
					case 160:
						if ((0x1000000010L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 159;
						break;
					case 161:
						if ((0x1000000010L & l) != 0L && kind > 49)
							kind = 49;
						break;
					case 162:
					case 164:
						if ((0x200000002L & l) != 0L)
							jjCheckNAdd(161);
						break;
					case 163:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 162;
						break;
					case 165:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 164;
						break;
					case 166:
						if ((0x8000000080L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 165;
						break;
					case 168:
					case 171:
						if ((0x8000000080000L & l) != 0L && kind > 50)
							kind = 50;
						break;
					case 169:
						if ((0x200000002000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 168;
						break;
					case 173:
						if ((0x400000004000000L & l) != 0L && kind > 51)
							kind = 51;
						break;
					case 174:
					case 176:
						if ((0x10000000100L & l) != 0L)
							jjCheckNAdd(173);
						break;
					case 177:
						if ((0x80000000800L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 176;
						break;
					case 179:
						if ((0x1000000010L & l) != 0L)
							jjAddStates(771, 772);
						break;
					case 180:
						if ((0x20000000200L & l) != 0L && kind > 52)
							kind = 52;
						break;
					case 181:
						if ((0x1000000010000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 180;
						break;
					case 182:
						if ((0x200000002000L & l) != 0L && kind > 52)
							kind = 52;
						break;
					case 183:
						if ((0x800000008L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 182;
						break;
					case 184:
						if ((0x1000000010000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 183;
						break;
					case 200:
					case 201:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddTwoStates(201, 202);
						break;
					case 202:
						if (curChar == 92)
							jjCheckNAddTwoStates(203, 204);
						break;
					case 203:
						if ((0x7fffffffffffffffL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddTwoStates(201, 202);
						break;
					case 204:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(430, 433);
						break;
					case 206:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(434, 440);
						break;
					case 207:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(441, 443);
						break;
					case 208:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(444, 447);
						break;
					case 209:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(448, 452);
						break;
					case 210:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(453, 458);
						break;
					case 211:
						if (curChar == 92)
							jjCheckNAddTwoStates(203, 212);
						break;
					case 212:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(459, 462);
						break;
					case 213:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(463, 469);
						break;
					case 214:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(470, 472);
						break;
					case 215:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(473, 476);
						break;
					case 216:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(477, 481);
						break;
					case 217:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddStates(482, 487);
						break;
					case 219:
					case 220:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddTwoStates(220, 221);
						break;
					case 221:
						if (curChar == 92)
							jjCheckNAddTwoStates(222, 223);
						break;
					case 222:
						if ((0x7fffffffffffffffL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddTwoStates(220, 221);
						break;
					case 223:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(488, 491);
						break;
					case 225:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(492, 498);
						break;
					case 226:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(499, 501);
						break;
					case 227:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(502, 505);
						break;
					case 228:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(506, 510);
						break;
					case 229:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(511, 516);
						break;
					case 230:
						if (curChar == 92)
							jjCheckNAddTwoStates(222, 231);
						break;
					case 231:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(517, 520);
						break;
					case 232:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(521, 527);
						break;
					case 233:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(528, 530);
						break;
					case 234:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(531, 534);
						break;
					case 235:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(535, 539);
						break;
					case 236:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddStates(540, 545);
						break;
					case 237:
						if ((0x20000000200000L & l) != 0L)
							jjAddStates(752, 754);
						break;
					case 239:
					case 243:
						if ((0x7fffffffffffffffL & l) != 0L)
							jjCheckNAddStates(552, 555);
						break;
					case 242:
						if (curChar == 92)
							jjAddStates(773, 774);
						break;
					case 244:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(556, 560);
						break;
					case 246:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(561, 568);
						break;
					case 247:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(569, 572);
						break;
					case 248:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(573, 577);
						break;
					case 249:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(578, 583);
						break;
					case 250:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(584, 590);
						break;
					case 252:
						if ((0x7fffffffefffffffL & l) != 0L)
							jjCheckNAddStates(591, 594);
						break;
					case 254:
						if (curChar == 92)
							jjAddStates(775, 776);
						break;
					case 256:
						if (curChar == 92)
							jjAddStates(777, 778);
						break;
					case 257:
						if ((0x7fffffffffffffffL & l) != 0L)
							jjCheckNAddStates(591, 594);
						break;
					case 258:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(595, 600);
						break;
					case 260:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(601, 609);
						break;
					case 261:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(610, 614);
						break;
					case 262:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(615, 620);
						break;
					case 263:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(621, 627);
						break;
					case 264:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(628, 635);
						break;
					case 267:
						if ((0x7fffffffefffffffL & l) != 0L)
							jjCheckNAddStates(636, 639);
						break;
					case 269:
						if (curChar == 92)
							jjAddStates(779, 780);
						break;
					case 271:
						if (curChar == 92)
							jjAddStates(781, 782);
						break;
					case 272:
						if ((0x7fffffffffffffffL & l) != 0L)
							jjCheckNAddStates(636, 639);
						break;
					case 273:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(640, 645);
						break;
					case 275:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(646, 654);
						break;
					case 276:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(655, 659);
						break;
					case 277:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(660, 665);
						break;
					case 278:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(666, 672);
						break;
					case 279:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(673, 680);
						break;
					case 282:
						if ((0x100000001000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 238;
						break;
					case 283:
						if ((0x4000000040000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 282;
						break;
					case 291:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjAddStates(697, 702);
						break;
					case 292:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 293;
						break;
					case 293:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 294;
						break;
					case 294:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAdd(295);
						break;
					case 295:
						if ((0x7e0000007eL & l) != 0L && kind > 80)
							kind = 80;
						break;
					case 296:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 297;
						break;
					case 297:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 298;
						break;
					case 298:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 299;
						break;
					case 299:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjstateSet[jjnewStateCnt++] = 287;
						break;
					case 300:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 301;
						break;
					case 301:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 302;
						break;
					case 302:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjstateSet[jjnewStateCnt++] = 303;
						break;
					case 304:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 305;
						break;
					case 305:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjstateSet[jjnewStateCnt++] = 306;
						break;
					case 308:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjstateSet[jjnewStateCnt++] = 309;
						break;
					case 317:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddTwoStates(318, 324);
						break;
					case 319:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjstateSet[jjnewStateCnt++] = 320;
						break;
					case 320:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddStates(713, 716);
						break;
					case 321:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAdd(295);
						break;
					case 322:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddTwoStates(295, 321);
						break;
					case 323:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 80)
							kind = 80;
						jjCheckNAddStates(717, 719);
						break;
					case 324:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(720, 724);
						break;
					case 325:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAdd(318);
						break;
					case 326:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddTwoStates(325, 318);
						break;
					case 327:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(725, 727);
						break;
					case 328:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(728, 731);
						break;
					case 329:
						if (curChar == 92)
							jjCheckNAddStates(745, 748);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 89:
						if ((jjbitVec0[i2] & l2) != 0L) {
							if (kind > 41)
								kind = 41;
							jjCheckNAddTwoStates(90, 91);
						}
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddStates(321, 323);
						break;
					case 1:
						if ((jjbitVec0[i2] & l2) != 0L) {
							if (kind > 31)
								kind = 31;
						}
						if ((jjbitVec0[i2] & l2) != 0L) {
							if (kind > 41)
								kind = 41;
							jjCheckNAddStates(740, 744);
						}
						break;
					case 55:
					case 56:
					case 59:
						if ((jjbitVec0[i2] & l2) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddTwoStates(57, 58);
						break;
					case 388:
					case 57:
						if ((jjbitVec0[i2] & l2) == 0L)
							break;
						if (kind > 70)
							kind = 70;
						jjCheckNAddTwoStates(57, 58);
						break;
					case 218:
					case 219:
					case 220:
					case 222:
						if ((jjbitVec0[i2] & l2) == 0L)
							break;
						if (kind > 81)
							kind = 81;
						jjCheckNAddTwoStates(220, 221);
						break;
					case 3:
					case 8:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddStates(109, 112);
						break;
					case 18:
					case 23:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddStates(105, 108);
						break;
					case 33:
					case 35:
						if ((jjbitVec0[i2] & l2) == 0L)
							break;
						if (kind > 55)
							kind = 55;
						jjCheckNAddTwoStates(33, 34);
						break;
					case 90:
					case 92:
						if ((jjbitVec0[i2] & l2) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddTwoStates(90, 91);
						break;
					case 100:
					case 101:
					case 104:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddStates(321, 323);
						break;
					case 126:
						if ((jjbitVec0[i2] & l2) == 0L)
							break;
						if (kind > 41)
							kind = 41;
						jjCheckNAddStates(740, 744);
						break;
					case 200:
					case 201:
					case 203:
						if ((jjbitVec0[i2] & l2) == 0L)
							break;
						if (kind > 54)
							kind = 54;
						jjCheckNAddTwoStates(201, 202);
						break;
					case 239:
					case 243:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddStates(552, 555);
						break;
					case 252:
					case 257:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddStates(591, 594);
						break;
					case 267:
					case 272:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjCheckNAddStates(636, 639);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 388 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjMoveStringLiteralDfa0_1() {
		switch (curChar) {
		case 42:
			return jjMoveStringLiteralDfa1_1(0x8L);
		default:
			return 1;
		}
	}

	private final int jjMoveStringLiteralDfa1_1(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return 1;
		}
		switch (curChar) {
		case 47:
			if ((active0 & 0x8L) != 0L)
				return jjStopAtPos(1, 3);
			break;
		default:
			return 2;
		}
		return 2;
	}
	static final int[] jjnextStates = { 331, 332, 333, 334, 335, 336, 130, 337, 338, 339, 133, 340, 341, 342, 136, 343,
			344, 345, 138, 346, 347, 348, 141, 349, 350, 351, 144, 352, 353, 354, 147, 355, 356, 357, 150, 358, 359,
			360, 153, 361, 362, 363, 156, 364, 365, 366, 160, 163, 166, 367, 368, 369, 169, 370, 371, 372, 171, 373,
			374, 375, 174, 376, 377, 378, 177, 379, 380, 381, 382, 383, 384, 186, 385, 386, 387, 199, 200, 211, 179,
			128, 129, 131, 134, 137, 139, 142, 145, 148, 151, 154, 157, 167, 170, 172, 175, 178, 185, 198, 218, 219,
			230, 89, 100, 112, 119, 18, 19, 20, 22, 3, 4, 5, 7, 56, 67, 198, 199, 200, 211, 157, 160, 163, 166, 3, 10,
			4, 5, 7, 11, 3, 12, 10, 4, 5, 7, 13, 14, 15, 3, 10, 4, 5, 7, 3, 12, 10, 4, 5, 7, 3, 12, 10, 4, 5, 7, 13, 3,
			12, 10, 4, 5, 7, 13, 14, 18, 25, 19, 20, 22, 26, 18, 27, 25, 19, 20, 22, 28, 29, 30, 18, 25, 19, 20, 22,
			18, 27, 25, 19, 20, 22, 18, 27, 25, 19, 20, 22, 28, 18, 27, 25, 19, 20, 22, 28, 29, 33, 37, 34, 38, 33, 39,
			37, 34, 40, 41, 42, 33, 37, 34, 33, 39, 37, 34, 33, 39, 37, 34, 40, 33, 39, 37, 34, 40, 41, 57, 61, 58, 62,
			57, 63, 61, 58, 64, 65, 66, 57, 61, 58, 57, 63, 61, 58, 57, 63, 61, 58, 64, 57, 63, 61, 58, 64, 65, 61, 57,
			58, 69, 70, 61, 57, 58, 71, 72, 73, 61, 57, 58, 70, 61, 57, 58, 70, 61, 57, 58, 71, 70, 61, 57, 58, 71, 72,
			90, 94, 91, 95, 90, 96, 94, 91, 97, 98, 99, 90, 94, 91, 90, 96, 94, 91, 90, 96, 94, 91, 97, 90, 96, 94, 91,
			97, 98, 101, 102, 103, 101, 106, 102, 103, 107, 101, 108, 106, 102, 103, 109, 110, 111, 101, 106, 102, 103,
			101, 108, 106, 102, 103, 101, 108, 106, 102, 103, 109, 101, 108, 106, 102, 103, 109, 110, 106, 101, 102,
			103, 114, 115, 106, 101, 102, 103, 116, 117, 118, 106, 101, 102, 103, 115, 106, 101, 102, 103, 115, 106,
			101, 102, 103, 116, 115, 106, 101, 102, 103, 116, 117, 94, 90, 91, 121, 122, 94, 90, 91, 123, 124, 125, 94,
			90, 91, 122, 94, 90, 91, 122, 94, 90, 91, 123, 122, 94, 90, 91, 123, 124, 193, 194, 190, 196, 197, 187,
			189, 201, 205, 202, 206, 201, 207, 205, 202, 208, 209, 210, 201, 205, 202, 201, 207, 205, 202, 201, 207,
			205, 202, 208, 201, 207, 205, 202, 208, 209, 205, 201, 202, 213, 214, 205, 201, 202, 215, 216, 217, 205,
			201, 202, 214, 205, 201, 202, 214, 205, 201, 202, 215, 214, 205, 201, 202, 215, 216, 220, 224, 221, 225,
			220, 226, 224, 221, 227, 228, 229, 220, 224, 221, 220, 226, 224, 221, 220, 226, 224, 221, 227, 220, 226,
			224, 221, 227, 228, 224, 220, 221, 232, 233, 224, 220, 221, 234, 235, 236, 224, 220, 221, 233, 224, 220,
			221, 233, 224, 220, 221, 234, 233, 224, 220, 221, 234, 235, 239, 251, 266, 241, 242, 281, 239, 240, 241,
			242, 239, 241, 242, 245, 246, 239, 247, 241, 242, 245, 248, 249, 250, 239, 241, 242, 245, 239, 247, 241,
			242, 245, 239, 247, 241, 242, 245, 248, 239, 247, 241, 242, 245, 248, 249, 252, 253, 254, 256, 252, 259,
			253, 254, 256, 260, 252, 261, 259, 253, 254, 256, 262, 263, 264, 252, 259, 253, 254, 256, 252, 261, 259,
			253, 254, 256, 252, 261, 259, 253, 254, 256, 262, 252, 261, 259, 253, 254, 256, 262, 263, 267, 268, 269,
			271, 267, 274, 268, 269, 271, 275, 267, 276, 274, 268, 269, 271, 277, 278, 279, 267, 274, 268, 269, 271,
			267, 276, 274, 268, 269, 271, 267, 276, 274, 268, 269, 271, 277, 267, 276, 274, 268, 269, 271, 277, 278,
			239, 251, 266, 240, 241, 242, 281, 285, 291, 287, 288, 289, 290, 287, 288, 289, 292, 296, 300, 304, 308,
			312, 287, 310, 311, 287, 313, 314, 315, 287, 313, 314, 295, 321, 322, 323, 295, 321, 322, 325, 318, 326,
			327, 328, 325, 318, 326, 325, 318, 326, 327, 364, 160, 163, 166, 385, 199, 200, 211, 90, 101, 102, 103, 91,
			92, 120, 104, 113, 55, 56, 67, 283, 284, 316, 86, 87, 82, 83, 77, 79, 16, 6, 8, 9, 31, 21, 23, 24, 35, 36,
			181, 184, 243, 244, 265, 255, 257, 258, 280, 270, 272, 273, };
	public static final String[] jjstrLiteralImages = { "", null, null, null, null, "\74\41\55\55", "\55\55\76",
			"\173", "\175", "\174\75", "\176\75", "\136\75", "\44\75", "\52\75", "\176", "\75", "\53", "\55", "\54",
			"\73", "\76", "\57", "\133", "\135", "\52", "\56", "\51", "\50", "\72", null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, "\72\72", };
	public static final String[] lexStateNames = { "DEFAULT", "IN_COMMENT", };
	public static final int[] jjnewLexState = { -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
	static final long[] jjtoToken = { 0xfffff700ffffffe3L, 0xf007fL, };
	static final long[] jjtoSkip = { 0x8L, 0x0L, };
	static final long[] jjtoMore = { 0x14L, 0x0L, };
	protected SimpleCharStream input_stream;
	private final int[] jjrounds = new int[388];
	private final int[] jjstateSet = new int[776];
	protected char curChar;

	public CssParserTokenManager(SimpleCharStream stream) {
		if (SimpleCharStream.staticFlag)
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}

	public CssParserTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private final void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 388; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	public void SwitchTo(int lexState) {
		if (lexState >= 2 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	protected Token jjFillToken() {
		Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		String im = jjstrLiteralImages[jjmatchedKind];
		t.image = (im == null) ? input_stream.GetImage() : im;
		t.beginLine = input_stream.getBeginLine();
		t.beginColumn = input_stream.getBeginColumn();
		t.endLine = input_stream.getEndLine();
		t.endColumn = input_stream.getEndColumn();
		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	public Token getNextToken() {
		int kind;
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			for (;;) {
				switch (curLexState) {
				case 0:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_0();
					break;
				case 1:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_1();
					if (jjmatchedPos == 0 && jjmatchedKind > 4) {
						jjmatchedKind = 4;
					}
					break;
				}
				if (jjmatchedKind != 0x7fffffff) {
					if (jjmatchedPos + 1 < curPos)
						input_stream.backup(curPos - jjmatchedPos - 1);
					if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						matchedToken = jjFillToken();
						if (jjnewLexState[jjmatchedKind] != -1)
							curLexState = jjnewLexState[jjmatchedKind];
						return matchedToken;
					} else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						if (jjnewLexState[jjmatchedKind] != -1)
							curLexState = jjnewLexState[jjmatchedKind];
						continue EOFLoop;
					}
					if (jjnewLexState[jjmatchedKind] != -1)
						curLexState = jjnewLexState[jjmatchedKind];
					curPos = 0;
					jjmatchedKind = 0x7fffffff;
					try {
						curChar = input_stream.readChar();
						continue;
					} catch (java.io.IOException e1) {
					}
				}
				int error_line = input_stream.getEndLine();
				int error_column = input_stream.getEndColumn();
				String error_after = null;
				boolean EOFSeen = false;
				try {
					input_stream.readChar();
					input_stream.backup(1);
				} catch (java.io.IOException e1) {
					EOFSeen = true;
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
					if (curChar == '\n' || curChar == '\r') {
						error_line++;
						error_column = 0;
					} else
						error_column++;
				}
				if (!EOFSeen) {
					input_stream.backup(1);
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
				}
				throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
						TokenMgrError.LEXICAL_ERROR);
			}
		}
	}

}
